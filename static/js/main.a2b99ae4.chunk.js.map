{"version":3,"sources":["App.tsx","no-geniza.ts","reportWebVitals.ts","index.tsx"],"names":["ButtonType","ALEPH","LAMED","YUD","HEY","VAV","REGEXP_NIKKUD_AND_CANTILLATION_RANGE_EXCLUDING_SOF_PASUK","start","end","excluded","excluding","String","fromCodePoint","codePointAt","regexRange","like","word","RegExp","split","map","l","join","SplitLayout","children","className","Button","onClick","type","buttonStylesByType","action","Stack","App","React","useState","input","setInput","inputArea","useRef","useEffect","current","focus","processed","replace","match","style","padding","width","height","background","position","top","right","left","zIndex","step","href","borderRadius","overflow","boxShadow","border","borderRight","dir","test","fontSize","maxWidth","boxSizing","resize","outline","value","disabled","display","justifyContent","navigator","clipboard","writeText","alignItems","src","filter","marginLeft","fontWeight","ref","placeholder","onChange","e","target","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAQKA,E,sDCRCC,G,MAAQ,UACRC,EAAQ,SACRC,EAAM,SACNC,EAAM,SACNC,EAAM,SAqBNC,EAhBa,SAAC,GAQL,IAPbC,EAOY,EAPZA,MACAC,EAMY,EANZA,IAOMC,EADM,EALZC,UAM2B,GAE3B,MAAM,IAAN,OAAWH,EAAX,YAAoBI,OAAOC,cACzBH,EAASI,YAAY,GAAM,IAD7B,OAEIF,OAAOC,cAAcH,EAASI,YAAY,GAAM,GAFpD,YAE0DL,EAF1D,KAK+DM,CAAW,CAC1EP,MApB4C,SAqB5CC,IApB0C,SAqB1CE,UAAW,CAvBK,YA0BZK,EAAO,SAACC,GACZ,OAAO,IAAIC,OAAJ,UACFD,EACAE,MAAM,IACNC,KACC,SAACC,GAAD,gBACKA,GADL,OACSd,EADT,QAGDe,KAAK,KACR,M,ODpCEC,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnC,OAAO,qBAAKC,UAAU,cAAf,SAA8BD,M,SAGlCvB,O,oBAAAA,M,KAIL,IAAMyB,EAA0D,SAAC,GAI1D,IAHLF,EAGI,EAHJA,SACAG,EAEI,EAFJA,QACAC,EACI,EADJA,KAEMC,EAAkB,eACrB5B,EAAW6B,OAAS,UAGvB,OACE,wBAAQL,UAAS,iBAAYI,EAAmBD,IAASD,QAASA,EAAlE,SACGH,KAKDO,EAAsB,SAAC,GAAkB,IAAhBP,EAAe,EAAfA,SAC7B,OAAO,qBAAKC,UAAU,QAAf,SAAwBD,KAwIlBQ,MArIf,WACE,MAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAYJ,IAAMK,OAAmC,MAE3DL,IAAMM,WAAU,WAAO,IAAD,EACpB,UAAAF,EAAUG,eAAV,SAAmBC,UAClB,IAEH,IAAMC,EAAqBP,ECMxBQ,QAAQ3B,EAAK,CAACZ,EAAKC,EAAKC,EAAKD,GAAKiB,KAAK,KAAM,gBAC7CqB,QAAQ3B,EAAK,CAACd,EAAOC,EAAOE,EAAKD,GAAKkB,KAAK,MAAM,SAACsB,GAAD,OAChDA,EAAMzB,MAAMhB,GAAOmB,KAAnB,WAA4BnB,ODNhC,OACE,qBAAK0C,MAAO,CAAEC,QAAS,OAAvB,SACE,eAAC,EAAD,WACE,qBACED,MAAO,CACLE,MAAO,OACPC,OAAQ,QACRC,WAAY,wBACZC,SAAU,WACVC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,QAAS,KAGb,2CACA,6BACG,CAAC,6EAAD,kKAIClC,KAAI,SAACmC,GAAD,OACJ,6BAAgBA,GAAPA,QAGb,mBAAGC,KAAK,wCAAR,SACE,iCACE,2DAIJ,qBACEX,MAAO,CACLY,aAAc,MACdC,SAAU,SACVX,MAAO,OACPY,UAAW,iCACXC,OAAQ,iCACRX,WAAY,SAPhB,SAUE,eAAC,EAAD,WACE,sBACEJ,MAAO,CACLgB,YAAa,kCACbf,QAAS,QACTG,WAAY,yBAJhB,UAOE,0BACEa,IAAK,kBAAQC,KAAK5B,EAAM,IAAM,MAAQ,MACtCU,MAAO,CACLE,MAAO,OACPC,OAAQ,OACRgB,SAAU,SACVC,SAAU,OACVC,UAAW,aACXjB,WAAY,OACZW,OAAQ,OACRO,OAAQ,OACRC,QAAS,QAEXC,MAAO3B,EACP4B,UAAQ,IAEV,qBAAKzB,MAAO,CAAE0B,QAAS,OAAQC,eAAgB,YAA/C,SACE,cAAC,EAAD,CACE5C,KAAM3B,EAAW6B,OACjBH,QAAS,WACP8C,UAAUC,UAAUC,UAAUjC,IAHlC,SAME,sBAAKG,MAAO,CAAE0B,QAAS,OAAQK,WAAY,UAA3C,UACE,qBACEC,IAAI,+BACJ7B,OAAO,KACPH,MAAO,CAAEiC,OAAQ,cAEnB,mBAAGjC,MAAO,CAAEkC,WAAY,UAAWC,WAAY,KAA/C,yCAOR,qBAAKnC,MAAO,CAAEC,QAAS,SAAvB,SACE,0BACEmC,IAAK5C,EACLyB,IAAK,kBAAQC,KAAK5B,EAAM,IAAM,MAAQ,MACtC+C,YAAY,sCACZrC,MAAO,CACLE,MAAO,OACPC,OAAQ,OACRgB,SAAU,SACVC,SAAU,OACVC,UAAW,aACXjB,WAAY,OACZW,OAAQ,OACRO,OAAQ,OACRC,QAAS,QAEXC,MAAOlC,EACPgD,SAAU,SAACC,GAAD,OAAOhD,EAASgD,EAAEC,OAAOhB,iBAK3C,wBAAQxB,MAAO,CAAEyC,UAAW,QAA5B,SACE,qBAAKzC,MAAO,CAAE0B,QAAS,OAAQC,eAAgB,UAA/C,SACE,mBAAGhB,KAAK,4CAAR,SACE,qBACEqB,IAAI,cACJ7B,OAAO,KACPH,MAAO,CAAEiC,OAAQ,6BE7IlBS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2b99ae4.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport noGeniza from './no-geniza'\n\nconst SplitLayout: React.FC<{}> = ({ children }) => {\n  return <div className=\"SplitLayout\">{children}</div>\n}\n\nenum ButtonType {\n  action,\n}\n\nconst Button: React.FC<{ onClick(): void; type: ButtonType }> = ({\n  children,\n  onClick,\n  type,\n}) => {\n  const buttonStylesByType = {\n    [ButtonType.action]: 'action',\n  }\n\n  return (\n    <button className={`Button ${buttonStylesByType[type]}`} onClick={onClick}>\n      {children}\n    </button>\n  )\n}\n\nconst Stack: React.FC<{}> = ({ children }) => {\n  return <div className=\"stack\">{children}</div>\n}\n\nfunction App() {\n  const [input, setInput] = React.useState('')\n  const inputArea = React.useRef<HTMLTextAreaElement | null>(null)\n\n  React.useEffect(() => {\n    inputArea.current?.focus()\n  }, [])\n\n  const processed = noGeniza(input)\n\n  return (\n    <div style={{ padding: '2em' }}>\n      <Stack>\n        <div\n          style={{\n            width: '100%',\n            height: '25rem',\n            background: 'hsla(0, 0%, 0%, 0.05)',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            left: 0,\n            zIndex: -1,\n          }}\n        />\n        <h1>No Geniza</h1>\n        <ol>\n          {[\n            `Paste source text that might contain holy names that would require geniza.`,\n            `Copy the result to your clipboard.`,\n            `Paste into your document. Now feel free to print it without worrying. Great for printing source sheets for a d'var Torah.`,\n          ].map((step) => (\n            <li key={step}>{step}</li>\n          ))}\n        </ol>\n        <a href=\"https://en.wikipedia.org/wiki/Genizah\">\n          <strong>\n            <em>{`\"Geniza\" on Wikipedia`}</em>\n          </strong>\n        </a>\n\n        <div\n          style={{\n            borderRadius: '6px',\n            overflow: 'hidden',\n            width: '100%',\n            boxShadow: '0 1px 4px hsla(0, 0%, 0%, 0.3)',\n            border: '1px solid hsla(0, 0%, 0%, 0.1)',\n            background: 'white',\n          }}\n        >\n          <SplitLayout>\n            <div\n              style={{\n                borderRight: '1px solid hsla(0, 0%, 0%, 0.15)',\n                padding: '1.5em',\n                background: 'hsla(0, 0%, 0%, 0.05)',\n              }}\n            >\n              <textarea\n                dir={/[א-ת]/.test(input[0]) ? 'rtl' : 'ltr'}\n                style={{\n                  width: '100%',\n                  height: '10em',\n                  fontSize: '1.5rem',\n                  maxWidth: '100%',\n                  boxSizing: 'border-box',\n                  background: 'none',\n                  border: 'none',\n                  resize: 'none',\n                  outline: 'none',\n                }}\n                value={processed}\n                disabled\n              />\n              <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                <Button\n                  type={ButtonType.action}\n                  onClick={() => {\n                    navigator.clipboard.writeText(processed)\n                  }}\n                >\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <img\n                      src=\"/content_copy_black_24dp.svg\"\n                      height=\"16\"\n                      style={{ filter: 'invert()' }}\n                    />\n                    <p style={{ marginLeft: '0.25rem', fontWeight: 500 }}>\n                      Copy to clipboard\n                    </p>\n                  </div>\n                </Button>\n              </div>\n            </div>\n            <div style={{ padding: '1.5em' }}>\n              <textarea\n                ref={inputArea}\n                dir={/[א-ת]/.test(input[0]) ? 'rtl' : 'ltr'}\n                placeholder=\"Paste (or type) source text here...\"\n                style={{\n                  width: '100%',\n                  height: '10em',\n                  fontSize: '1.5rem',\n                  maxWidth: '100%',\n                  boxSizing: 'border-box',\n                  background: 'none',\n                  border: 'none',\n                  resize: 'none',\n                  outline: 'none',\n                }}\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n              />\n            </div>\n          </SplitLayout>\n        </div>\n        <footer style={{ marginTop: '5rem' }}>\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <a href=\"https://github.com/akivajgordon/no-geniza\">\n              <img\n                src=\"/github.svg\"\n                height=\"30\"\n                style={{ filter: 'invert(0.7)' }}\n              />\n            </a>\n          </div>\n        </footer>\n      </Stack>\n    </div>\n  )\n}\n\nexport default App\n","const ALEPH = 'א'\nconst LAMED = 'ל'\nconst YUD = 'י'\nconst HEY = 'ה'\nconst VAV = 'ו'\nconst SOF_PASUK = '\\u05c3'\nconst UNICODE_NIKKUD_AND_CANTILLATION_START = '\\u0590'\nconst UNICODE_NIKKUD_AND_CANTILLATION_END = '\\u05cf'\n\nconst regexRange = ({\n  start,\n  end,\n  excluding,\n}: {\n  start: string\n  end: string\n  excluding: [string]\n}): string => {\n  const excluded = excluding[0]\n\n  return `[${start}-${String.fromCodePoint(\n    excluded.codePointAt(0)! - 1\n  )}${String.fromCodePoint(excluded.codePointAt(0)! + 1)}-${end}]`\n}\n\nconst REGEXP_NIKKUD_AND_CANTILLATION_RANGE_EXCLUDING_SOF_PASUK = regexRange({\n  start: UNICODE_NIKKUD_AND_CANTILLATION_START,\n  end: UNICODE_NIKKUD_AND_CANTILLATION_END,\n  excluding: [SOF_PASUK],\n})\n\nconst like = (word: string): RegExp => {\n  return new RegExp(\n    `${word\n      .split('')\n      .map(\n        (l) =>\n          `${l}${REGEXP_NIKKUD_AND_CANTILLATION_RANGE_EXCLUDING_SOF_PASUK}*`\n      )\n      .join('')}`,\n    'g'\n  )\n}\n\nexport default (s: string): string => {\n  return s\n    .replace(like([YUD, HEY, VAV, HEY].join('')), 'ה׳')\n    .replace(like([ALEPH, LAMED, HEY, YUD].join('')), (match) =>\n      match.split(LAMED).join(`-${LAMED}`)\n    )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}